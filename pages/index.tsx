import type { NextPage } from "next";
import Head from "next/head";
import { useAppEthereumContext } from "../context/AppEthereumContext";
import TetherAbi from "../build/contracts/Tether.json";
import RewardAbi from "../build/contracts/Reward.json";
import DecentralBankAbi from "../build/contracts/DecentralBank.json";
import { useEffect, useState } from "react";
import { Tether } from "../types/web3-v1-contracts/Tether";
import { DecentralBank } from "../types/web3-v1-contracts/DecentralBank";
import { Reward } from "../types/web3-v1-contracts/Reward";
import StakingForm from "../components/defi/StakingForm";
export interface HomePageData {
  tetherBalance?: string;
  tether?: Tether;
  rwdBalance?: string;
  stakingBalance?: string;
  rwd?: Reward;
  decentralBank?: DecentralBank;
  loading: boolean;
}

const Home: NextPage = () => {
  const context = useAppEthereumContext();
  const [data, setData] = useState<HomePageData>({
    loading: true,
  });

  useEffect(() => {
    async function fetchData() {
      await loadBlockChainData();
    }

    async function loadBlockChainData() {
      const homePageData: HomePageData = {
        loading: true,
      };

      const networkId = (await context.web3?.eth.net.getId()) + "";
      const tetherData = (TetherAbi as any).networks[networkId];
      if (tetherData && context.account) {
        const tether = new context.web3!.eth.Contract(
          TetherAbi.abi as any,
          tetherData.address
        ) as any as Tether;

        const tetherBalance = await tether.methods
          .balanceOf(context.account!)
          .call();
        homePageData.tetherBalance = tetherBalance;
        homePageData.tether = tether;
      }

      const rewardData = (RewardAbi as any).networks[networkId];
      if (rewardData && context.account) {
        const rwd = new context.web3!.eth.Contract(
          RewardAbi.abi as any,
          rewardData.address
        ) as any as Reward;
        const rewardBalance = await rwd.methods
          .balanceOf(context.account)
          .call();
        homePageData.rwdBalance = rewardBalance;
        homePageData.rwd = rwd;
      }

      const decentralBankData = (DecentralBankAbi as any).networks[networkId];
      if (decentralBankData && context.account) {
        const decentralBank = new context.web3!.eth.Contract(
          DecentralBankAbi.abi as any,
          decentralBankData.address
        ) as any as DecentralBank;

        const stakingBalance = await decentralBank.methods
          .stakingBalance(context.account)
          .call();
        homePageData.decentralBank = decentralBank;
        homePageData.stakingBalance = stakingBalance;
      }
      homePageData.loading = false;
      setData(homePageData);
    }

    fetchData();
  }, [context.web3, context.account]);

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>
        <StakingForm data={data} />
      </div>
    </div>
  );
};

export default Home;
